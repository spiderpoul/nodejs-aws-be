# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  sqsQueueName: catalogItemsQueue
  webpack: 
    webpackConfig: './webpack.config.js'
    includeModules: true
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    websocketPort: 4001 

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic
  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]    
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        - Ref: SNSTopic

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
        
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          method: post
          path: /products

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
        batchSize: 2
        arn:
          Fn::GetAtt:
            - SQSQueue
            - Arn

resources:
 Resources:
   SQSQueue:
     Type: AWS::SQS::Queue
     Properties:
       QueueName: ${self:custom.sqsQueueName}  
   SNSTopic:
     Type: AWS::SNS::Topic
     Properties:
       TopicName: createProductTopic
   SNSSubscription:
     Type: AWS::SNS::Subscription
     Properties:
       Endpoint: spiderpoul@mail.ru
       Protocol: email
       TopicArn:
         Ref: SNSTopic
 Outputs:
     SQSQueueUrl:
       Value:
         Ref: SQSQueue
     SQSQueueArn:
       Value:
         Fn::GetAtt: [ SQSQueue, Arn ]       

